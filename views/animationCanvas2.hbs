    <style>
        canvas {
            background-color: rgb(30, 30, 30);
            position:relative;
        }

    </style>

    <canvas class="col-md-12" style="margin:0;padding:0;border:1px solid black;"></canvas>
    Particle Count: <input type="text" id="particleCount" class="particleCount" value="100" onkeypress=""> 
    <input type="submit" class="btn btn-primary" onclick="init()" value="Render"> 
    <a class="btn btn-primary" href="/animation" value="Next">Next</a>

    <script>
// Initial Setup
const canvas = document.querySelector('canvas')
const c = canvas.getContext('2d')

canvas.width = innerWidth
canvas.height = innerHeight

// Variables
const mouse = {
    x: innerWidth / 2,
    y: innerHeight / 2
}

$('#particleCount').keypress(function (event) {
    var keycode = event.keyCode || event.which;
    if (keycode == '13') {
        init();
    }
});


const colors = ['#00bdff', '#4d39ce', '#088eff']

// Event Listeners
addEventListener('mousemove', evt => {
       var rect = canvas.getBoundingClientRect(), // abs. size of element
        scaleX = canvas.width / rect.width,    // relationship bitmap vs. element for X
        scaleY = canvas.height / rect.height;


    mouse.x = (evt.clientX - rect.left) * scaleX  // scale mouse coordinates after they have
    mouse.y = (evt.clientY - rect.top) * scaleY
})

addEventListener('resize', () => {
    canvas.width = innerWidth
    canvas.height = innerHeight

    init()
})

// Utility Functions
function randomIntFromRange(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min)
}

function randomColor(colors) {
    return colors[Math.floor(Math.random() * colors.length)]
}

function distance(x1, y1, x2, y2) {
    const xDist = x2 - x1
    const yDist = y2 - y1

    return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2))
}

// Objects
function Particle(x, y, radius, color) {
    this.x = x
    this.y = y
    this.radius = radius
    this.color = color
    this.radians = Math.random() * Math.PI * 2;
    this.velocity = 0.05
    this.distanceFromCenter = {
        x:  randomIntFromRange(25, 200),
        y:   randomIntFromRange(90, 100)
    }

    this.lastMouse = {
        x: x, 
        y: y
    }


    this.update = function () {
        const lastPoint = { x: this.x, y: this.y }
        //move points over time
        this.radians += this.velocity;

        //drag for mouse
        this.lastMouse.x += (mouse.x - this.lastMouse.x)* 0.05
        this.lastMouse.y += (mouse.y - this.lastMouse.y)* 0.05

        this.x = this.lastMouse.x + Math.cos(this.radians) * this.distanceFromCenter.x
        this.y = this.lastMouse.y + Math.sin(this.radians) * this.distanceFromCenter.y
        this.draw(lastPoint)
    }

    this.draw = (lastPoint) => {
        c.beginPath()
        c.strokeStyle = this.color;
        c.lineWidth = this.radius;

        c.moveTo(lastPoint.x, lastPoint.y)
        c.lineTo(this.x, this.y)
        c.stroke()

        c.fill()
        c.closePath()
    }
}


// Implementation
let particles;
function init() {
    var getParticleCount = document.getElementsByClassName('particleCount')[0].value

    particles = []

    for (let i = 0; i < getParticleCount; i++) {
        const radius = (Math.random() * 2 ) + 1
        particles.push(new Particle(canvas.width / 2, canvas.height / 2, radius, randomColor(colors)));
    }
}

// Animation Loop
function animate() {
    requestAnimationFrame(animate)
    //c.clearRect(0, 0, canvas.width, canvas.height)
    c.fillStyle = 'rgba(255,255,255,0.05)'
    c.fillRect(0, 0, canvas.width, canvas.height)

    particles.forEach(particle => {
        particle.update();
    });
}

init()
animate()

    </script>